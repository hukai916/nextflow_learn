params {
 publish_dir_mode = 'symlink'
 params.reference_align = 'assets/ref_mm_short.fa'
}

profiles {
    docker {
        docker.enabled         = true
        // docker.runOptions = "--platform linux/x86_64" // if the image is built with arm64, specifying this lie cause the image undetectable by docker daemon: hukai916/rclone:0.1
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.pullTimeout = '100 min'
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        cacheDir               = './work/singularity' // not working, setting NXF_SINGULARITY_CACHEDIR env variable not working either. must be supplied via command flag
        singularity.runOptions = '--bind /home:/home' // for test in hpcc
    }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
  }
    local {
        executor {
            queueSize = 3 // to avoid freezing local computer
        
        }
    }
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

includeConfig 'conf/base.config'

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
